#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

uniform mat4 MVP;

void main(){

	// Output position of the vertex, in clip space
	// map [0..800][0..600] to [-1..1][-1..1]
	//vec3 vertexPosition_homoneneousspace = vertexPosition_screenspace - vec3(400,300,0); // [0..800][0..600] -> [-400..400][-300..300]
	//vertexPosition_homoneneousspace /= vec3(400,300,1);
	//gl_Position =  vec4(vertexPosition_homoneneousspace,1);
    
    gl_Position = MVP * vec4(vertexPosition, 1);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

